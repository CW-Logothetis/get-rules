# Dynamic Merge Request Description Generator

This rule automates the drafting of a Merge Request description for a bug fix. It uses the current git diff to understand the changes and can optionally incorporate information from Jira tickets to provide context.

## Instructions for AI

When the user invokes this rule, follow these steps:

1.  **Get Git Context**
    Run the command `git diff develop...HEAD` to get the diff between the `develop` branch and the user's current local branch. This is your primary source for understanding the code changes.

2.  **Check for Jira Tickets (Optional)**
    Ask the user: "Are there any Jira tickets associated with this MR? If so, please provide the ticket numbers." If they provide tickets, you will use this information to describe the bug. Otherwise, you will infer the bug's behavior from the git diff.

3.  **Analyze and Draft**
    -   Analyze the output from the `git diff`. Identify the core problem that was fixed and how the new code solves it.
    -   If Jira tickets were provided, use their titles, descriptions and comments for the "Bug Behavior" section.
    -   Fill out the template below. Prefer bullet points instead of sentences. Be concise and clear.

    **Template to Fill:**
    ````markdown
    ## Technical Description of Bug Behavior

    <!-- Analyze the "before" state from the git diff or use the Jira ticket description to explain what was happening. -->
    <!-- What actually happens -->
    <!-- Provide any relevant technical details, such as error messages or stack traces. -->

    ## Solution Provided

    <!-- Analyze the "after" state from the git diff to describe the fix. Explain the new logic or changes. -->
    ````

4.  **Create Architecture Diagram**
    -   Based on the file paths in the `git diff`, identify the key components that were changed and their relationships. Put the names on one line, then in parenthesis on a new line, describe the file in very few words.
    -   Create a Mermaid `graph TD` diagram to visualize these components.
    -   **Important Styling Rules:** Use the following styles for the diagram to ensure clarity and consistency in both light and dark modes:
        -   **All Nodes:** Use black backgrounds (`fill:#000000`), a `1px` border (`stroke-width:1px`), and rounded corners (`rx:5,ry:5`).
        -   **Unchanged Components:** Use white text (`color:#ffffff`) and a gray border (`stroke:#666666`).
        -   **Changed Components (from git diff):** Use light green text (`color:#90EE90`) and a light green border (`stroke:#90EE90`) to highlight them.
    -   Add the complete diagram markdown to the MR description under a `## Component Architecture Diagram` section.

5.  **Present to User**
    Combine the filled-out template and the Mermaid diagram into a single markdown block and present it to the user.
