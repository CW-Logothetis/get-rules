---
alwaysApply: true
---

# Import Rules Summary

Based on my deep analysis of your codebase, here are the import rules and patterns I've identified:

## 1. Path Resolution Configuration

- **Base URL**: `tsconfig.json` sets `"baseUrl": "src"` - this enables absolute imports from the `src` directory
- **Webpack**: Configured to resolve modules from `src` directory without needing the `src/` prefix
- **ESLint**: Import resolver configured for TypeScript with paths starting from `src`

## 2. Import Path Patterns

### External/Node Modules (Standard)
```typescript
import { Box, Typography } from '@dev-team/smoothie-core';
import React from 'react';
import moment from 'moment';
import debounce from 'lodash/debounce';
```

### Absolute Imports from src (Primary Pattern)
```typescript
// From utils directory
import { makeSxStyles } from 'utils/makeSxStyles';
import { DateFormats } from 'utils/dateFormats';
import { useErrorHandlers } from 'utils/error-handlers';

// From components directory
import { AsyncPage } from 'components/AsyncPage';
import { InfiniteScrollView } from 'components/InfiniteScrollView/InfiniteScrollView';
import Form from 'components/form/Form/Form';

// From graphql directory
import { useGetCompanyInfoLazyQuery } from 'graphql/queries/companiesInfo/companyInfo.operation';
import type { Employee } from 'graphql/base-types';
import { ExperienceStatus } from 'graphql/base-types';

// From pages directory
import { CompanyBrief } from 'pages/companies/components/CompanyBrief/CompanyBrief';
import { useCompaniesSearchState } from 'pages/companies/hooks/useCompaniesSearchState';
```

### Relative Imports (For Same/Parent Directories)
**Same folder only:** We only allow relative imports from the same folder:
```typescript
// Same folder
import { classes } from './CompanySearchInput.styles';
import { CompanyBrief } from './CompanyBrief';
```

** DO NOT** use relative imports from parent folders or multiple levels up.

## 3. Key Rules

1. **Never include `src/` prefix** - The baseUrl configuration handles this
2. **Never include file extensions** - Webpack/TypeScript handles `.ts`, `.tsx`, `.js`, `.jsx` resolution
3. **Prefer absolute imports** over relative when importing from different feature areas
4. **Only use relative imports** for files in the same directory
  
## 4. Default Export Rule

**⚠️ AVOID DEFAULT EXPORTS**

While the codebase currently contains default exports, the preferred pattern is to use named exports:

## 5. Test File Import Patterns

Test files follow specific patterns for importing utilities and helpers:

### Test Utilities from `__test-utils__`
```typescript
// Basic test utilities
import { reduxWrapper, renderHook } from '__test-utils__';
import { createRender, screen, fireEvent, waitFor } from '__test-utils__';
import { act, render, ueclick } from '__test-utils__';

// User interaction helpers
import { userEvent } from '__test-utils__';
```

This configuration allows you to import from any directory under `src` using clean, absolute paths while maintaining the flexibility to use relative imports for closely related files.
