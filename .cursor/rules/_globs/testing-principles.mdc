---
globs: **/*.test.ts,**/*.test.tsx
alwaysApply: false
---

# Testing principles and standards for test files

## Inform the user

- **Notification:** Always start answers about test files, e.g. that match `**/*.test.ts,**/*.test.tsx`, with "Compling with Test Rules:"

## Render Pattern

- **Use createRender:** Always use `createRender` and import from `__test-utils__` instead of direct `render` e.g. `const render = createRender(['Theme', 'Redux'])`. Check the order that the providers need adding to the array.
- **Destructure screen methods:** Always destructure methods from the render result, e.g. `const { getByText, getByRole } = render()`, so you do `expect(getByRole)` and not `expect(screen.getByRole)`.

## Required Helpers

Use utilities from `__test-utils__` including:

- **autoFakeApollo:** Use `autoFakeApollo` in createRender OR in tests when GraphQL mocking is needed
- **apollo's MockedProvider:** Use `apollo` in createRender provider when mocked provider is needed  
- **userActions:** Use `userActions` helpers for user interaction testing

## Jest Mock, not require()

- **require():** do NOT use require()
- **mock and import:** - instead of require() you should follow this pattern:

```jest.mock('pages/experts/ExpertResultItem/hooks/useExpertSelectedProfile', () => ({
  useExpertSelectedProfile: jest.fn(),
}));
```

// Then import normally
import { useExpertSelectedProfile } from 'pages/experts/ExpertResultItem/hooks/useExpertSelectedProfile';

// In tests, cast to jest.Mock
(useExpertSelectedProfile as jest.Mock).mockReturnValue({...});

## Do not write code in tests

- we do not want to write code in tests that then needs testing
- This is BAD:

```typescript
    (useRefreshExpertContactDetails as jest.Mock).mockImplementation((expertId, onComplete, options) => {
      // Simulate contact refresh completing successfully
      if (options.shouldRefresh) {
        React.useEffect(() => {
          onComplete();
        }, []);
      }
      return { hasError: false, isCompleted: true };
    });
```

it should just return the mocked value:
```typescript
  (useRefreshExpertContactDetails as jest.Mock).mockReturnValue({
      hasError: false,
      isCompleted: true,
    });
```

## React Testing Library

- **RTL Principles:** you must follow the RTL principles from the official docs and blogs of Kent C. Dodds. For example:

1. we are testing what the user will see and experience
2. we use data-testid as a last resort
3. we do **NOT** test CSS unless essential - check with the user first
4. we do **NOT** use MUI data-testid because they could lead to brittle tests.
5. prefer `.not.toBeInTheDocument()` over `toBeNull`.

## RegEx

- **RegEx for text:** better to use regex to select parts of text in any case rather than checking whole sentences. It is less brittle.

## Test descriptions

- **Start with a verb:** e.g. `it(handles...`, `it(opens...). Do NOT use "should" like `it(should...)`.

## Example Pattern

```tsx
import React from 'react';
import { MemoryRouter, Route } from 'react-router-dom';

import { createRender, ueclick, waitFor } from '__test-utils__';
import { AutoFakeApollo } from '__test-utils__/__helpers__/autoFakeApollo/autoFakeApollo';
import { ExpertFinderSubsearchStatus } from 'graphql/base-types';
import { GetProjectExpertFinderCompanyTabsDocument } from 'graphql/queries/projects/project-tabs/projectExpertFinderCompanyTabs.operation';
import { LayoutContext } from 'layouts/Maven/LayoutContext';
import { ProjectViewContext } from 'pages/project-view/ProjectViewContext';
import { useExpertFinderNavigation } from 'pages/project-view/tabs/expertFinder/hooks/useExpertFinderNavigation';
import { Resource } from 'services/authorisation/accessRights/resources';
import { ProtectedAreaProvider } from 'services/authorisation/ProtectedAreaProvider';

const { getByText, getByRole } = createRender(<Component />);
```

**REMEMBER: Always use createRender, destructure screen methods, and leverage the helper utilities in @/**test-utils**/**helpers** for consistent testing patterns. Always follow Kent C. Dodds's best practice for testing the user experience with RTL**
