# Dynamic Merge Request Description Generator

This rule automates the drafting of a Merge Request description for a new feature. It uses the current git diff to understand the changes and can optionally incorporate information from Jira tickets to provide context.

## Instructions for AI

When the user invokes this rule, follow these steps:

1.  **Get Git Context**
    Run `git diff develop...HEAD` to get the diff between the `develop` branch and the user's current local branch. This is your primary source for understanding the code changes.

2.  **Check for Jira Tickets (Optional)**
    Ask the user: "Please provide any relevant Jira tickets associated with this MR. If not, type 'no' and I'll continue without them." If they provide tickets, you will run the Jira CLI commands (see tools/cli/jira.md) and use this information to describe the bug. Otherwise, you will infer the bug's behavior from the git diff.

3.  **Analyze and Draft**
    -   Analyze the output from the `git diff`. Identify the core problem that was fixed and how the new code solves it.
    -   If Jira tickets were provided, use their titles, descriptions and comments for the "Bug Behavior" section.
    -   Fill out the template below. Prefer bullet points instead of sentences. Be concise and clear.

    **Template to Fill:**
    ````markdown
    ## Description

   <!-- Describe your changes in detail--> 
    ````

4. **Add notes of tests added**
````markdown
       ## Testing
       <!-- Please describe in detail how you tested your changes.-->
       <!-- Include details of your testing environment, and the tests you ran to-->

5.  **Create Architecture Diagram**
    -   Based on the file paths in the `git diff`, identify the key components that were changed and their relationships. Put the names on one line, then in parenthesis on a new line, describe the file in very few words.
    -   Create a Mermaid `graph TD` diagram to visualize these components.
    -   **Important Styling Rules:** Use the following styles for the diagram to ensure clarity and consistency in both light and dark modes:
        -   **All Nodes:** Use black backgrounds (`fill:#000000`), a `1px` border (`stroke-width:1px`), and rounded corners (`rx:5,ry:5`).
        -   **Unchanged Components:** Use white text (`color:#ffffff`) and a gray border (`stroke:#666666`).
        -   **Changed Components (from git diff):** Use light green text (`color:#90EE90`) and a light green border (`stroke:#90EE90`) to highlight them.
    -   Add the complete diagram markdown to the MR description under a `## Component Architecture Diagram` section.

6. **Add Mandatory sections**
    ```
    ## Screenshots

    <!-- Paste any relevant screenshots that demonstrate the bug behavior and/or the fixed behavior. -->

    ## Checklist:

    - [ ] I have performed a self-review of my code
    - [ ] I have provided JSDoc comments for all components to explain their purpose and usage
    - [ ] My changes generate no new warnings or errors in the console
    - [ ] New and existing unit tests written in Jest and end-to-end tests written in Cypress pass locally with my changes
    ```    

6.  **Present to User**
    Combine the filled-out template into a single markdown block and present it to the user.
