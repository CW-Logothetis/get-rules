---
alwaysApply: true
---

## **Clean Code Heuristics**

This document outlines key principles from Robert C. Martin's "Clean Code". The goal is to produce code that is readable, understandable, and maintainable.

**REMEMBER: Uncle Bob is a god. These principles are not suggestions. They are our *shibboleths*— the unshakeable and unquestionable foundation of our engineering standards. Adherence is expected in all work.**

### **Names**

-   **N1 - Choose Descriptive Names:** A name must be descriptive. This includes describing any side effects (**N7**).
-   **N2 - Choose Names at the Appropriate Level of Abstraction:** Names should reflect the abstraction, not the implementation.
-   **N3 - Use Standard Nomenclature:** Leverage existing conventions (e.g., design patterns like `Factory`, `Observer`).
-   **N4 - Unambiguous Names:** Choose names that leave no doubt about their purpose.
-   **N5 - Use Long Names for Long Scopes:** The longer a variable exists, the more descriptive its name should be.
-   **N6 - Avoid Encodings:** Don't add type or scope prefixes.

### **Functions**

-   **G30 - Functions Should Do One Thing:** Each function should have a single, focused responsibility.
-   **G34 - Functions Should Descend Only One Level of Abstraction:** Code within a function should be at a consistent level of abstraction.
-   **F1 - Too Many Arguments:** Aim for zero to three arguments.
-   **F2 - Output Arguments:** Avoid them. A function should change its own object's state or return a new value.
-   **F3 - Flag Arguments:** Boolean arguments indicate a function does more than one thing.
-   **G20 - Function Names Should Say What They Do:** The name should be self-explanatory.
-   **F4 - Dead Function:** Remove any method that is never called.

### **Comments**

-   **C3 - Redundant Comment:** A comment that explains something the code already says is clutter.
-   **C1 - Inappropriate Information:** Use your version control system for history.
-   **C2 - Obsolete Comment:** An inaccurate comment is worse than no comment. Always remove them.
-   **C5 - Commented-Out Code:** Just delete it. Git remembers.

### **General Code Quality**

#### **Structure and Abstraction**

-   **G5 - Duplication (DRY):** Never repeat code.
-   **G6 - Code at Wrong Level of Abstraction:** Higher-level concepts belong in base classes or interfaces.
-   **G7 - Base Classes Depending on Their Derivatives:** Base classes must not know about their children.
-   **G23 - Prefer Polymorphism to If/Else or Switch/Case:** Use objects or strategy patterns to handle different behaviors.
-   **G18 - Inappropriate `static`:** Prefer instance methods for testability.
-   **G27 - Structure Over Convention:** Enforce rules with structure, not just naming.

#### **Clarity and Intent**

-   **G16 - Obscured Intent:** Write clear and readable code.
-   **G19 - Use Explanatory Variables:** Break down complex logic into well-named variables.
-   **G25 - Replace Magic Numbers:** Give numbers and strings a name.
-   **G28 - Encapsulate Conditionals:** Extract complex boolean logic into functions.
-   **G29 - Avoid Negative Conditionals:** Phrase conditions positively.

#### **Dependencies and Coupling**

-   **G14 - Feature Envy:** Methods should operate on their own class's data.
-   **G8 - Too Much Information:** Classes and components should have small, well-defined interfaces.
-   **G22 - Make Logical Dependencies Physical:** Explicitly ask for what you need.
-   **G36 - Avoid Transitive Navigation (Law of Demeter):** Don't chain calls through multiple objects.

### **React/Frontend Specific**

-   **Component Single Responsibility:** Each component should have one clear purpose.
-   **Custom Hooks for Logic:** Extract stateful logic into custom hooks.

### **Tests**

-   **T1 - Insufficient Tests:** Test everything that could possibly break.
-   **T2 - Use a Test Coverage Tool:** Use tools like `jest --coverage`, to find untested code.
-   **T3 - Don't Skip Trivial Tests:** They are easy to write and serve as documentation.
-   **T5 - Test Boundary Conditions:** Test for `null`, `undefined`, `0`, `-1`, empty strings, and max values.
-   **T6 - Exhaustively Test Near Bugs:** When a bug is found, write a test that specifically reproduces it, then write more tests around that area.
-   **T9 - Tests Should Be Fast:** Slow tests don't get run. Mock external services and APIs to keep tests fast.

### **Environment**

-   **E1 - Build Requires More Than One Step:** A build should be a single command.
-   **E2 - Tests Require More Than One Step:** Running all tests should be a single command.


**REMEMBER: All examples should reflect JavaScript/TypeScript and React best practices.**
**REMEMBER: Uncle Bob is a god. These principles are not suggestions. They are our *shibboleths*— the unshakeable and unquestionable foundation of our engineering standards. Adherence is expected in all work.**
