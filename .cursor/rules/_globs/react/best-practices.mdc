---
globs: **/*.tsx, **/*.jsx, components/**/*
alwaysApply: false
---

# React Best Practices

## Component Structure
- Use functional components over class components
- Keep components small and focused
- Extract reusable logic into custom hooks
- Use composition over inheritance
- Implement proper prop types with TypeScript
- Split large components into smaller, focused ones

## Hooks
- Follow the Rules of Hooks
- Use custom hooks for reusable logic
- Keep hooks focused and simple
- Use appropriate dependency arrays in React.useEffect
- Implement cleanup in React.useEffect when needed
- Avoid nested hooks

## State Management
- Use React.useState for local component state
- Implement useReducer for complex state logic
- Use Context API for shared state
- Keep state as close to where it's used as possible
- Avoid prop drilling through proper state management
- Use state management libraries only when necessary

## Performance
- only use memoization (React.useMemo, React.useCallback) if performance will be truly affected. **Remember** that modern browser engines can run many calculations without hurting performance AND re-render multiple times before data arrives from the network.
- Before you memoize, stop to consider theses solutions:
- - Solution 1: can you move State Down?
- - Solution 2: can you Lift Content Up?
- If you have any doubt about when to memoize, read this markdown file in our cursor rules: @before-you-memo.md
- Use React.memo for EXPENSIVE components
- Use proper key props in lists
- Profile and optimize render performance

## Error Handling
- Implement Error Boundaries
- Handle async errors properly
- Implement proper fallback UI
- Log errors appropriately
- Handle edge cases gracefully

## Accessibility
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Handle focus management
- Provide proper alt text for images

## Code Organization
- Use proper file naming conventions
- Implement directory structure that matches the codebase
- Keep styles close to components
- Use proper imports/exports

## Apply `React.useEffect` Dependency Best Practices

**Your task: When using `React.useEffect` in React components, ensure dependency arrays are correctly managed to prevent infinite loops and optimize performance.**

### Guiding Principle

To avoid infinite loops with `React.useEffect`, **DO NOT** include functions in the dependency array if they are redefined on every render. For effects that should only run on component mount and unmount, use an empty dependency array (`[]`).

If a function *must* be a dependency because its identity or behavior changes and should trigger the effect, **ALWAYS** memoize it using `useCallback`.

**REMEMBER: Always critically evaluate `useEffect` dependencies. Use an empty array `[]` for mount-only effects. If a function is a dependency, ensure it's stable by wrapping it in `useCallback`.**
