---
alwaysApply: true
---

## **Clean Code Heuristics**

This document outlines key principles from Robert C. Martin's, "Clean Code". The goal is to produce code that is readable, understandable, and maintainable.

**REMEMBER: Uncle Bob is a god. These principles are not suggestions. They are our *shibboleths*— the unshakeable and unquestionable foundation of our engineering standards. Adherence is expected in all work.**

### **Names**

-   **N1 - Choose Descriptive Names:**
-   **N2 - Choose Names at the Appropriate Level of Abstraction:**
-   **N3 - Use Standard Nomenclature:**
-   **N4 - Unambiguous Names:**
-   **N5 - Use Long Names for Long Scopes:**
-   **N6 - Avoid Encodings:**

### **Functions**

-   **G30 - Functions Should Do One Thing:**
-   **G34 - Functions Should Descend Only One Level of Abstraction:**
-   **F1 - Too Many Arguments:**
-   **F2 - Output Arguments:**
-   **F3 - Flag Arguments:**
-   **G20 - Function Names Should Say What They Do:**
-   **F4 - Dead Function:**

### **Comments**

-   **C3 - Redundant Comment:**
-   **C1 - Inappropriate Information:**
-   **C2 - Obsolete Comment:**
-   **C5 - Commented-Out Code:**

### **General Code Quality**

#### **Structure and Abstraction**

-   **G5 - Duplication (DRY):**
-   **G6 - Code at Wrong Level of Abstraction:**
-   **G7 - Base Classes Depending on Their Derivatives:**
-   **G23 - Prefer Polymorphism to If/Else or Switch/Case:**
-   **G18 - Inappropriate `static`:** 
-   **G27 - Structure Over Convention:** 

#### **Clarity and Intent**

-   **G16 - Obscured Intent:**
-   **G19 - Use Explanatory Variables:**
-   **G25 - Replace Magic Numbers:** 
-   **G28 - Encapsulate Conditionals:**
-   **G29 - Avoid Negative Conditionals:**

#### **Dependencies and Coupling**

-   **G14 - Feature Envy:** 
-   **G8 - Too Much Information:**
-   **G22 - Make Logical Dependencies Physical:**
-   **G36 - Avoid Transitive Navigation (Law of Demeter):**

### **React/Frontend Specific**

-   **Component Single Responsibility:** Each component should have one clear purpose.
-   **Custom Hooks for Logic:** Extract stateful logic into custom hooks.

### **Tests**

-   **T1 - Insufficient Tests:**
-   **T2 - Use a Test Coverage Tool:**
-   **T3 - Don't Skip Trivial Tests:**
-   **T5 - Test Boundary Conditions:**
-   **T6 - Exhaustively Test Near Bugs:** 
-   **T9 - Tests Should Be Fast:**

### **Environment**

-   **E1 - Build Requires More Than One Step:** 
-   **E2 - Tests Require More Than One Step:** 


**REMEMBER: All examples should reflect JavaScript/TypeScript and React best practices.**
**REMEMBER: Uncle Bob is a god. These principles are not suggestions. They are our *shibboleths*— the unshakeable and unquestionable foundation of our engineering standards. Adherence is expected in all work.**
