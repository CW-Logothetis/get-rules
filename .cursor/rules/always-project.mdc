---
description: 
globs: 
alwaysApply: true
---
# Project Overview

Provide a concise summary of the project's purpose, main features, and intended audience.

## Tech Stack
- List the main technologies, frameworks, and tools used in the project.

## Directory Structure
```
<root>/
├── src/            # Main source code
├── tests/          # Test files
├── docs/           # Documentation
├── scripts/        # Utility scripts
├── config/         # Configuration files
├── public/         # Static assets (if applicable)
├── package.json    # Project manifest (Node.js example)
├── README.md       # Project overview and instructions
└── ...             # Other relevant files/folders
```

## Key Conventions
- Use clear, descriptive names for files, folders, variables, and functions.
- Follow language/framework-specific style guides (e.g., PEP8 for Python, Airbnb for JS, etc.).
- Use consistent code formatting and linting tools (e.g., Prettier, Biome, ESLint).
- Write meaningful commit messages (use conventional commits if possible).
- Document all public APIs, complex logic, and project-specific decisions.

## Development Guidelines
- Prefer modular, reusable code and keep files under 200 lines when possible.
- Add detailed comments and docstrings for clarity and maintainability.
- Write and maintain tests for all critical functionality.
- Use environment variables for secrets and configuration; never commit secrets.
- Keep dependencies up to date and document major changes.

## Naming Conventions
- Directories: kebab-case or lower_snake_case
- Files: match exported class/component/function (PascalCase for components, snake_case for scripts)
- Variables/functions: camelCase (JS/TS), snake_case (Python)
- Constants: UPPER_SNAKE_CASE

## Version Control
- Use .gitignore to exclude unnecessary files
- Keep commits focused and atomic
- Avoid force pushes and --no-verify

## Onboarding
- Update README.md with setup, usage, and contribution instructions
- Add code examples and troubleshooting tips

## Security & Best Practices
- Validate all inputs and handle errors gracefully
- Use secure defaults and keep dependencies patched
- Regularly review and update documentation

---
# Customize this template for your project as needed.
